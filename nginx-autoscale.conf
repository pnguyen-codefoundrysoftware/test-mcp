events {
    worker_connections 1024;
}

http {
    upstream mcp_servers {
        # Docker Compose will resolve this to all scaled instances
        server mcp-server:3000;
        
        # Health checks and load balancing
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    server {
        listen 80;
        
        # Enable sticky sessions for SSE connections
        # In production, use ip_hash or implement session affinity based on session ID
        # For demonstration, we'll use basic round-robin
        
        location / {
            proxy_pass http://mcp_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Important for SSE connections
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            
            # Timeouts for long-running SSE connections
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;
            
            # Apply rate limiting
            limit_req zone=api burst=20 nodelay;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://mcp_servers/health;
            proxy_set_header Host $host;
            
            # Quick health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Special handling for SSE endpoints to improve stickiness
        location /sse {
            # In production, you might want to use session-based routing here
            # For now, we rely on the stateless design
            proxy_pass http://mcp_servers/sse;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # SSE-specific settings
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            
            # Longer timeout for SSE connections
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
            
            # Add headers for SSE
            add_header Cache-Control no-cache;
            add_header X-Accel-Buffering no;
        }
    }
}

# Production Notes:
# 1. Use session affinity for SSE connections in production
# 2. Consider using Redis-based session store for nginx
# 3. Implement proper SSL termination
# 4. Add monitoring and logging
# 5. Use health checks to remove unhealthy nodes 